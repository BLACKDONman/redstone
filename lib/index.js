// Generated by CoffeeScript 1.6.2
(function() {
  var colors, fs, sshclient, _;

  sshclient = require('sshclient');

  fs = require('fs');

  _ = require('underscore');

  colors = require('colors');

  module.exports = {
    login: function(options, cb) {
      var ssh;

      ssh = new sshclient.SSH({
        hostname: options.hostname,
        user: options.user,
        port: options.port
      });
      return cb(ssh);
    },
    coldSetup: function(ssh, options, cb) {
      var basePath, coldSetupCommands, commands, currentFolder, deploymentsPath, installCommands, outputFolder, restartCommands, timeStamp;

      timeStamp = Date.now().toString();
      basePath = options.baseDir + options.appName + "/";
      deploymentsPath = basePath + "deployments/";
      currentFolder = basePath + "current/";
      outputFolder = deploymentsPath + timeStamp;
      coldSetupCommands = ["mkdir " + basePath, "mkdir " + deploymentsPath];
      installCommands = ["git clone " + options.repo + " " + outputFolder, "cd " + outputFolder + " && " + options.commands.install];
      restartCommands = ["cd " + basePath + " && ln -s " + outputFolder + " current", "cd " + currentFolder + " && " + options.commands.start];
      commands = _.union(coldSetupCommands, installCommands, restartCommands);
      return this.runCommands(ssh, commands, cb);
    },
    update: function(ssh, options, cb) {
      var basePath, commands, currentFolder, deploymentsPath, insertkeywordVariables, installCommands, outputFolder, restartCommands, timeStamp;

      timeStamp = Date.now().toString();
      basePath = options.baseDir + options.appName + "/";
      deploymentsPath = basePath + "deployments/";
      currentFolder = basePath + "current/";
      outputFolder = deploymentsPath + timeStamp;
      insertkeywordVariables = function(commands) {
        return _.map(commands, function(cmd) {
          return cmd.replace('OUTPUT_PATH', outputFolder).replace('CURRENT_PATH', currentFolder).replace('BASE_PATH', basePath).replace('DEPLOYMENTS_PATH', deploymentsPath).replace('TIMESTAMP', timeStamp).replace('GIT_REPO', options.repo);
        });
      };
      installCommands = ["git clone GIT_REPO OUTPUT_PATH", "cd OUTPUT_PATH && " + options.commands.install];
      restartCommands = ["cd BASE_PATH && ln -sfn OUTPUT_PATH current", "cd CURRENT_PATH && " + options.commands.restart];
      commands = insertkeywordVariables(_.union(installCommands, options.commands.afterInstall, restartCommands));
      return this.runCommands(ssh, commands, cb);
    },
    runCommands: function(ssh, commands, cb) {
      var currentCommandNumber;

      currentCommandNumber = 0;
      return this.runCommand(ssh, commands, currentCommandNumber, function(err) {
        if (typeof cb === 'function') {
          return cb(err);
        }
      });
    },
    runCommand: function(ssh, commands, number, cb) {
      var err, self;

      err = null;
      self = this;
      return ssh.command(commands[number], function(procResult) {
        if (procResult.exitCode === 0) {
          console.log(("✔ " + commands[number]).green);
        } else {
          console.log(("✘ " + commands[number]).red);
          console.log(procResult.stderr.red);
        }
        if (procResult.exitCode === 0 && number < commands.length - 1) {
          number++;
          return self.runCommand(ssh, commands, number, cb);
        } else {
          if (procResult.exitCode === 1) {
            err = new Error(procResult.stderr);
          }
          if (typeof cb === 'function') {
            return cb(err);
          }
        }
      });
    }
  };

}).call(this);
