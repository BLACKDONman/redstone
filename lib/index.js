// Generated by CoffeeScript 1.6.2
(function() {
  var coldSetupCommands, colors, displayResult, executeTheNextCommand, fs, handleError, handleResult, insertkeywordVariables, installCommands, launch, restartCommands, setDeploymentPaths, sshclient, startCommands, _;

  sshclient = require('sshclient');

  fs = require('fs');

  _ = require('underscore');

  colors = require('colors');

  setDeploymentPaths = function(options, cb) {
    var basePath, currentFolder, deploymentsPath, err, outputFolder, timestamp;

    try {
      timestamp = Date.now().toString();
      basePath = "" + options.baseDir + options.appName + "/";
      deploymentsPath = "" + basePath + "deployments/";
      currentFolder = "" + basePath + "current/";
      outputFolder = "" + deploymentsPath + timestamp;
      return cb(null, {
        timestamp: timestamp,
        basePath: basePath,
        deploymentsPath: deploymentsPath,
        currentFolder: currentFolder,
        outputFolder: outputFolder
      });
    } catch (_error) {
      err = _error;
      console.log(err);
      return cb(err, null);
    }
  };

  insertkeywordVariables = function(commands, paths, options) {
    return _.map(commands, function(cmd) {
      return cmd.replace('OUTPUT_PATH', paths.outputFolder).replace('CURRENT_PATH', paths.currentFolder).replace('BASE_PATH', paths.basePath).replace('DEPLOYMENTS_PATH', paths.deploymentsPath).replace('TIMESTAMP', paths.timeStamp).replace('GIT_REPO', options.repo).replace('INSTALL_COMMAND', options.commands.install).replace('RESTART_COMMAND', options.commands.restart).replace('START_COMMAND', options.commands.start);
    });
  };

  coldSetupCommands = ["mkdir BASE_PATH", "mkdir DEPLOYMENTS_PATH"];

  installCommands = ["git clone GIT_REPO OUTPUT_PATH", "cd OUTPUT_PATH && INSTALL_COMMAND"];

  startCommands = ["cd BASE_PATH && ln -s OUTPUT_PATH current", "cd CURRENT_PATH && START_COMMAND"];

  restartCommands = ["cd BASE_PATH && ln -sfn OUTPUT_PATH current", "cd CURRENT_PATH && RESTART_COMMAND"];

  displayResult = function(command, exitCode, stderr) {
    if (exitCode === 0) {
      return console.log(("✔ " + command).green);
    } else {
      console.log(("✘ " + command).red);
      return console.log(stderr.red);
    }
  };

  handleResult = function(exitCode, number, commands, ssh, self, stderr, cb) {
    if (exitCode === 0 && number < commands.length - 1) {
      return executeTheNextCommand(self, ssh, commands, number, cb);
    } else {
      return handleError(stderr, exitCode, cb);
    }
  };

  executeTheNextCommand = function(self, ssh, commands, number, cb) {
    number++;
    return self.runCommand(ssh, commands, number, cb);
  };

  handleError = function(stderr, exitCode, cb) {
    var err;

    if (exitCode === 1) {
      err = new Error(stderr);
    }
    if (typeof cb === 'function') {
      return cb(err);
    }
  };

  launch = function(ssh, options, preProcessedCommands, self, cb) {
    return setDeploymentPaths(options, function(err, paths) {
      var commands;

      commands = insertkeywordVariables(preProcessedCommands, paths, options);
      return self.runCommands(ssh, commands, cb);
    });
  };

  module.exports = {
    login: function(options, cb) {
      var ssh;

      ssh = new sshclient.SSH({
        hostname: options.hostname,
        user: options.user,
        port: options.port
      });
      return cb(ssh);
    },
    coldSetup: function(ssh, options, cb) {
      var preProcessedCommands;

      preProcessedCommands = _.union(coldSetupCommands, installCommands, startCommands);
      return launch(ssh, options, preProcessedCommands, this, cb);
    },
    update: function(ssh, options, cb) {
      var preProcessedCommands;

      preProcessedCommands = _.union(installCommands, options.commands.afterInstall, restartCommands);
      return launch(ssh, options, preProcessedCommands, this, cb);
    },
    runCommands: function(ssh, commands, cb) {
      var currentCommandNumber;

      currentCommandNumber = 0;
      return this.runCommand(ssh, commands, currentCommandNumber, function(err) {
        if (typeof cb === 'function') {
          return cb(err);
        }
      });
    },
    runCommand: function(ssh, commands, number, cb) {
      var _this = this;

      return ssh.command(commands[number], function(procResult) {
        displayResult(commands[number], procResult.exitCode, procResult.stderr);
        return handleResult(procResult.exitCode, number, commands, ssh, _this, procResult.stderr, cb);
      });
    }
  };

}).call(this);
